import pymysql.cursors
from flask import Flask, render_template, request, abort, send_file, session, redirect
from os import path, listdir
from pymysql.err import Error as PyMySQLError

app = Flask(__name__)
app.debug = False 
# Default database settings. Overridden by config.py

try:
    import config
except ImportError:
    print "[-] No config.py!"
    exit(1)

app.secret_key = config.secret_key

connection = pymysql.connect(host=config.host,
                             user=config.user,
                             password=config.password,
                             db=config.db,
                             port=config.port,
                             charset='utf8mb4',
                             cursorclass=pymysql.cursors.DictCursor)
connection.autocommit(True)


# The main page of the app
@app.route('/')
def index():
    uid = session.get('uid')
    username = session.get('username')
    query = "SELECT * FROM players"
    players = None
    try:
        with connection.cursor() as db:
            db.execute(query)
	    result = db.fetchall()
	if len(result) > 0:
            players = result
    except PyMySQLError as e:
            return 'MySQL Error: {}'.format(e)

    return render_template('home.html', uid=uid, username=username, players=players)

# Javascript route for an authentication script
@app.route('/js/<scriptName>')
def js(scriptName=None):
    if scriptName is not None:
        scriptPath = path.join('js', scriptName)
        if path.exists(scriptPath) and path.isfile(scriptPath):
            return send_file(scriptPath, mimetype='text/javascript')
        
    abort(404)


## Im really not sure what this is for because im tired, but its here.
#@app.route('/static/<filename>')
#def statick(filename=None):
#    if filename is not None:
#        filePath = path.join('static', filename)
#        if path.exists(filePath) and path.isfile(filePath):
#            return send_file(filePath)
#
#    abort(404)
#

# Static images for item pictures
@app.route('/images/<image>')
def images(image=None):
    return send_file('images/' + image)


# Login to an existing user account
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        postData = request.form
    
        username = postData.get('username', '')
        password = postData.get('password', '')
        query = "SELECT * FROM players WHERE username = '{}' AND password = SHA1('{}')".format(username, password)
        try:
            with connection.cursor() as db:
                db.execute(query)
                result = db.fetchall()
                if len(result) > 0:
                    session['uid'] = result[0]['uid']
                    session['loggedin'] = True
                    session['username'] = username
			# rip
                    #pass_check = "sha1(relevantxkcd) == {}".format(result[0]['password'])
                    #session['check_admin_pass'] = "sha1"

                   # # This chunk ensures that the cookie gets compressed.
                   # session['data'] = """Four score and seven years ago our fathers brought forth on this continent,
                   # a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.
                   # 
                   # Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and
                   # so dedicated, can long endure. We are met on a great battle-field of that war. We have come to
                   # dedicate a portion of that field, as a final resting place for those who here gave their lives that
                   # that nation might live. It is altogether fitting and proper that we should do this."""

                    return redirect('/')
                else:
                    return 'Login unsuccessful, user not found'
        except PyMySQLError as e:
            return 'MySQL Error: {}'.format(e.args[1])
    
    return render_template('login.html')


# Register a new account on the site
@app.route('/register', methods=['POST', 'GET'])
def register():
    postData = request.form
    if 'username' in postData and 'password' in postData and 'password_check' in postData:
        username = postData['username']
        password = postData['password']
        password_check = postData['password_check']

        if password_check != password:
            return "Your passwords do not match"
        
        query = "INSERT INTO players (username, password) VALUES ('{}', SHA1('{}'))".format(username, password)
        
        try:
           with connection.cursor() as db:
		   db.execute(query)
        except PyMySQLError as e:
            return "This terrible thing happened {}".format(e)

        # TODO: finish registration endpoint
        return redirect('/')
    else:
        return render_template("register.html")


# TODO
# Views data about the account, namely balance and transactions. Maybe password reset too in the future
@app.route('/account', methods=["GET"])
def myaccount():
    userid = request.args.get('uid')
    
    if userid == None:
        return "Error: No account id provided"

    query = 'SELECT * FROM players WHERE uid = {}'.format(userid)
    try:
        with connection.cursor() as db:
            db.execute(query)
            results = db.fetchall()
            return render_template('account.html', results=results)
    except PyMySQLError as e:
        return 'MySQL Error: {}'.format(e.args[1])

    results = [{"item_name": "gang", "description": "bloods", "cost": 420}]
    return render_template('account.html', results=results)
    #return 'Nothing to see here. There was an error'


# Logs a user out of their session
@app.route('/logout')
def logout():
    if session['loggedin']:
        session.clear()
    return redirect('/')


# Item listings that are for sale
# SQL injection present via the q parameter
#@app.route('/listings')
#def search():
#    if request.args.get('q') == None:
#        query = 'SELECT * from transactions, items WHERE transactions.type LIKE "forsale" AND transactions.item_id = items.item_id;'
#        try:
#            with connection.cursor() as db:
#                db.execute(query)
#                result = db.fetchall()
#                return render_template('listings.html', rows=result)
#        except PyMySQLError as e:
#            return 'MySQL Error: {}'.format(e.args[1])
#        return "Nothing to see here"
#    else:
#        # Search for listings by a specific user
#        q = request.args.get('q')
#        query = 'select username, item_id from transactions, users where users.id = transactions.uid AND users.id = {}'.format(q)
#        try:
#            with connection.cursor() as db:
#                db.execute(query)
#                results = db.fetchall()
#                return "{}".format(results)
#        except PyMySQLError as e:
#            return 'MySQL Error: {}'.format(e.args[1])
#        return query
#

@app.route("/mission/<m>")
def mission(m):
	value = 0
	if m == "sort":
		value = 5
	elif m == "bomb":
		value = 10
	elif m == "dog":
		value = 15
	query = 'UPDATE players SET points=points+{} WHERE username="{}"'.format(value, session['username'])
	try:
		with connection.cursor() as db:
			db.execute(query)
	except PyMySQLError as e:
		return "Action not valid {}".format(e)
	return redirect('/account?uid={}'.format(session['uid']))

@app.route('/buzz')
def broke():
	print "PIN should be in my profile somewhere...(do NOT brute force)"
	return "Permission to Buzz the tower sir?"/0

if (app.debug):
	from werkzeug.debug import DebuggedApplication
	app.wsgi_app = DebuggedApplication(app.wsgi_app, True)

if __name__ == '__main__':
    app.run(debug=True)
